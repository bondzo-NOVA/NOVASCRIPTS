local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

-- Table to store lines for each player's bones
local boneLines = {}

-- Function to create a line
local function createLine()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Color = Color3.fromRGB(128, 0, 128) -- Purple
    line.Thickness = 2
    return line
end

-- Function to get bone connections (body part pairs)
local function getBoneConnections(character)
    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
    local head = character:FindFirstChild("Head")
    local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
    local leftArm = character:FindFirstChild("Left Arm") or character:FindFirstChild("LeftUpperArm")
    local rightArm = character:FindFirstChild("Right Arm") or character:FindFirstChild("RightUpperArm")
    local leftLeg = character:FindFirstChild("Left Leg") or character:FindFirstChild("LeftUpperLeg")
    local rightLeg = character:FindFirstChild("Right Leg") or character:FindFirstChild("RightUpperLeg")

    local bones = {}
    if humanoidRootPart and torso then
        table.insert(bones, {humanoidRootPart, torso})
    end
    if head and torso then
        table.insert(bones, {torso, head})
    end
    if leftArm and torso then
        table.insert(bones, {torso, leftArm})
    end
    if rightArm and torso then
        table.insert(bones, {torso, rightArm})
    end
    if leftLeg and torso then
        table.insert(bones, {torso, leftLeg})
    end
    if rightLeg and torso then
        table.insert(bones, {torso, rightLeg})
    end
    return bones
end

-- Function to update ESP for a player
local function updatePlayerESP(player)
    if boneLines[player] then
        for _, line in ipairs(boneLines[player]) do
            line:Remove()
        end
        boneLines[player] = nil
    end

    local character = player.Character
    if not character or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then
        return
    end

    local bones = getBoneConnections(character)
    boneLines[player] = {}

    for _, bone in ipairs(bones) do
        local part1, part2 = bone[1], bone[2]
        local line = createLine()
        table.insert(boneLines[player], line)
    end
end

-- Function to update all lines
local function updateLines()
    for player, lines in pairs(boneLines) do
        local character = player.Character
        if not character or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then
            updatePlayerESP(player)
            continue
        end

        local bones = getBoneConnections(character)
        for i, line in ipairs(lines) do
            if i > #bones then
                line.Visible = false
                continue
            end
            local part1, part2 = bones[i][1], bones[i][2]
            local camera = workspace.CurrentCamera
            local pos1, onScreen1 = camera:WorldToViewportPoint(part1.Position)
            local pos2, onScreen2 = camera:WorldToViewportPoint(part2.Position)

            if onScreen1 and onScreen2 then
                line.From = Vector2.new(pos1.X, pos1.Y)
                line.To = Vector2.new(pos2.X, pos2.Y)
                line.Visible = true
            else
                line.Visible = false
            end
        end
    end
end

-- Connect player events
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        updatePlayerESP(player)
    end)
end)

Players.PlayerRemoving:Connect(function(player)
    if boneLines[player] then
        for _, line in ipairs(boneLines[player]) do
            line:Remove()
        end
        boneLines[player] = nil
    end
end)

-- Initial setup for existing players
for _, player in ipairs(Players:GetPlayers()) do
    if player.Character then
        updatePlayerESP(player)
    end
    player.CharacterAdded:Connect(function()
        updatePlayerESP(player)
    end)
end

-- Run update every frame
RunService.RenderStepped:Connect(updateLines)
