local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

local Player = Players.LocalPlayer
local camera = Workspace.CurrentCamera

-- Error logging
local function logError(err)
    warn("Bone ESP Script Error: " .. tostring(err))
end

-- Table to store lines for each player's bones
local boneLines = {}

-- Function to create a line
local function createLine()
    local line = Drawing.new("Line")
    line.Visible = false
    line.Color = Color3.fromRGB(128, 0, 255) -- Purple
    line.Thickness = 2
    line.Transparency = 0.7
    return line
end

-- Function to get hand and feet connections (torso to hands and feet)
local function getLimbConnections(character)
    local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")
    local leftHand = character:FindFirstChild("Left Arm") or character:FindFirstChild("LeftHand")
    local rightHand = character:FindFirstChild("Right Arm") or character:FindFirstChild("RightHand")
    local leftFoot = character:FindFirstChild("Left Leg") or character:FindFirstChild("LeftFoot")
    local rightFoot = character:FindFirstChild("Right Leg") or character:FindFirstChild("RightFoot")
    local bones = {}
    if torso and leftHand then
        table.insert(bones, {torso, leftHand})
    end
    if torso and rightHand then
        table.insert(bones, {torso, rightHand})
    end
    if torso and leftFoot then
        table.insert(bones, {torso, leftFoot})
    end
    if torso and rightFoot then
        table.insert(bones, {torso, rightFoot})
    end
    return bones
end

-- Function to update ESP for a player
local function updatePlayerESP(player)
    if boneLines[player] then
        for _, line in ipairs(boneLines[player].Lines) do
            line:Remove()
        end
        boneLines[player] = nil
    end

    local character = player.Character
    if not character or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 or player == Player then
        return
    end

    boneLines[player] = {Lines = {}, Character = character}
    local bones = getLimbConnections(character)
    for _ = 1, #bones do
        table.insert(boneLines[player].Lines, createLine())
    end
end

-- Function to update all lines
local function updateLines()
    pcall(function()
        for player, data in pairs(boneLines) do
            local character = player.Character
            if not character or not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then
                updatePlayerESP(player)
                return
            end

            local bones = getLimbConnections(character)
            for i, line in ipairs(data.Lines) do
                if i > #bones then
                    line.Visible = false
                    continue
                end
                local part0, part1 = bones[i][1], bones[i][2]
                if part0 and part1 then
                    local pos0, onScreen0 = camera:WorldToViewportPoint(part0.Position)
                    local pos1, onScreen1 = camera:WorldToViewportPoint(part1.Position)
                    if onScreen0 and onScreen1 then
                        line.From = Vector2.new(pos0.X, pos0.Y)
                        line.To = Vector2.new(pos1.X, pos1.Y)
                        line.Visible = true
                    else
                        line.Visible = false
                    end
                else
                    line.Visible = false
                end
            end
        end
    end)
end

-- Player events
local playerAddedConnection = Players.PlayerAdded:Connect(function(player)
    if player ~= Player then
        pcall(function()
            updatePlayerESP(player)
            player.CharacterAdded:Connect(function()
                updatePlayerESP(player)
            end)
        end)
    end
end)

local playerRemovingConnection = Players.PlayerRemoving:Connect(function(player)
    pcall(function()
        if boneLines[player] then
            for _, line in ipairs(boneLines[player].Lines) do
                line:Remove()
            end
            boneLines[player] = nil
        end
    end)
end)

-- Initial setup
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= Player and player.Character then
        pcall(function()
            updatePlayerESP(player)
            player.CharacterAdded:Connect(function()
                updatePlayerESP(player)
            end)
        end)
    end
end

-- Render loop
local renderSteppedConnection = RunService.RenderStepped:Connect(updateLines)

-- Cleanup
game:BindToClose(function()
    pcall(function()
        if playerAddedConnection then playerAddedConnection:Disconnect() end
        if playerRemovingConnection then playerRemovingConnection:Disconnect() end
        if renderSteppedConnection then renderSteppedConnection:Disconnect() end
        for _, data in pairs(boneLines) do
            for _, line in pairs(data.Lines) do
                line.Visible = false
                line:Remove()
            end
        end
    end)
end)

local success, err = pcall(function()
    print("Bone ESP Script Loaded Successfully")
end)
if not success then
    warn("Bone ESP Script Loaded Unsuccessfully:", err)
end
