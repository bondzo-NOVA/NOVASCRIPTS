--[[ 
	CatHub UI Library
	Author: LUA Programming GOD
	Version: 1.0
--]]

local CatHubLib = {}
CatHubLib.__index = CatHubLib

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Utility function for rounding slider values
local function round(num, decimalPlaces)
	local mult = 10^(decimalPlaces or 0)
	return math.floor(num * mult + 0.5) / mult
end

--// Create Main Window
function CatHubLib:CreateWindow(title)
	local self = setmetatable({}, CatHubLib)

	local ScreenGui = Instance.new("ScreenGui", game.Players.LocalPlayer:WaitForChild("PlayerGui"))
	ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	local TopBar = Instance.new("Frame", ScreenGui)
	TopBar.Size = UDim2.new(0, 420, 0, 30)
	TopBar.Position = UDim2.new(0.5, -210, 0.12, 0)
	TopBar.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	TopBar.Active = true

	local UICorner = Instance.new("UICorner", TopBar)
	UICorner.CornerRadius = UDim.new(0, 6)

	local Title = Instance.new("TextLabel", TopBar)
	Title.Size = UDim2.new(1, 0, 1, 0)
	Title.BackgroundTransparency = 1
	Title.Text = title or "Cat Hub"
	Title.Font = Enum.Font.GothamSemibold
	Title.TextColor3 = Color3.fromRGB(78, 170, 227)
	Title.TextSize = 18

	local Frame = Instance.new("Frame", ScreenGui)
	Frame.Size = UDim2.new(0, 508, 0, 400)
	Frame.Position = UDim2.new(0.5, -254, 0.18, 0)
	Frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
	local UICorner_2 = Instance.new("UICorner", Frame)
	UICorner_2.CornerRadius = UDim.new(0, 10)

	-- Tabs container
	local TabsFrame = Instance.new("Frame", Frame)
	TabsFrame.BackgroundTransparency = 1
	TabsFrame.Position = UDim2.new(0, 10, 0, 10)
	TabsFrame.Size = UDim2.new(1, -20, 0, 35)

	local TabsLayout = Instance.new("UIListLayout", TabsFrame)
	TabsLayout.FillDirection = Enum.FillDirection.Horizontal
	TabsLayout.Padding = UDim.new(0, 5)

	local ContentFrame = Instance.new("Frame", Frame)
	ContentFrame.BackgroundTransparency = 1
	ContentFrame.Position = UDim2.new(0, 10, 0, 55)
	ContentFrame.Size = UDim2.new(1, -20, 1, -65)

	--// Dragging logic
	local dragging = false
	local dragStart, startPos
	local frameTargetPos = Frame.Position
	local lerpSpeed = 0.1

	local function lerpUDim2(current, target, alpha)
		return UDim2.new(
			current.X.Scale + (target.X.Scale - current.X.Scale) * alpha,
			current.X.Offset + (target.X.Offset - current.X.Offset) * alpha,
			current.Y.Scale + (target.Y.Scale - current.Y.Scale) * alpha,
			current.Y.Offset + (target.Y.Offset - current.Y.Offset) * alpha
		)
	end

	TopBar.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			dragStart = input.Position
			startPos = TopBar.Position
		end
	end)

	UserInputService.InputChanged:Connect(function(input)
		if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
			local delta = input.Position - dragStart
			local newPos = UDim2.new(0.5, -210 + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
			TopBar.Position = newPos
			frameTargetPos = UDim2.new(0.5, -254 + delta.X, newPos.Y.Scale + 0.057, newPos.Y.Offset)
		end
	end)

	UserInputService.InputEnded:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = false
		end
	end)

	RunService.RenderStepped:Connect(function()
		Frame.Position = lerpUDim2(Frame.Position, frameTargetPos, lerpSpeed)
	end)

	-- Store UI references
	self.ScreenGui = ScreenGui
	self.Frame = Frame
	self.TabsFrame = TabsFrame
	self.ContentFrame = ContentFrame
	self.Tabs = {}

	function self:CreateTab(tabName)
		local tab = {}
		tab.Name = tabName

		local Button = Instance.new("TextButton", TabsFrame)
		Button.Size = UDim2.new(0, 100, 1, 0)
		Button.BackgroundColor3 = Color3.fromRGB(47, 47, 47)
		Button.TextColor3 = Color3.fromRGB(200, 200, 200)
		Button.Font = Enum.Font.GothamSemibold
		Button.Text = tabName
		Button.TextSize = 16
		Instance.new("UICorner", Button).CornerRadius = UDim.new(0, 6)

		Button.MouseEnter:Connect(function()
			TweenService:Create(Button, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}):Play()
		end)
		Button.MouseLeave:Connect(function()
			TweenService:Create(Button, TweenInfo.new(0.15), {BackgroundColor3 = Color3.fromRGB(47, 47, 47)}):Play()
		end)

		local Page = Instance.new("ScrollingFrame", ContentFrame)
		Page.Visible = false
		Page.Size = UDim2.new(1, 0, 1, 0)
		Page.CanvasSize = UDim2.new(0, 0, 0, 0)
		Page.ScrollBarThickness = 4
		Page.BackgroundTransparency = 1
		local Layout = Instance.new("UIListLayout", Page)
		Layout.Padding = UDim.new(0, 5)
		Layout.SortOrder = Enum.SortOrder.LayoutOrder

		self.Tabs[tabName] = Page

		Button.MouseButton1Click:Connect(function()
			for _, other in pairs(self.Tabs) do
				other.Visible = false
			end
			Page.Visible = true
		end)

		-- First tab is visible by default
		if #TabsFrame:GetChildren() <= 2 then
			Page.Visible = true
		end

		function tab:CreateButton(text, callback)
			local btn = Instance.new("TextButton", Page)
			btn.Size = UDim2.new(0, 200, 0, 35)
			btn.BackgroundColor3 = Color3.fromRGB(47, 47, 47)
			btn.TextColor3 = Color3.fromRGB(255, 255, 255)
			btn.Text = text
			btn.Font = Enum.Font.GothamSemibold
			btn.TextSize = 16
			Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 6)
			btn.MouseButton1Click:Connect(callback)
			return btn
		end

		function tab:CreateToggle(text, default, callback)
			local frame = Instance.new("Frame", Page)
			frame.Size = UDim2.new(0, 200, 0, 35)
			frame.BackgroundColor3 = Color3.fromRGB(47, 47, 47)
			Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)

			local label = Instance.new("TextLabel", frame)
			label.Size = UDim2.new(1, -40, 1, 0)
			label.BackgroundTransparency = 1
			label.Text = text
			label.TextColor3 = Color3.fromRGB(255, 255, 255)
			label.TextSize = 16
			label.Font = Enum.Font.Gotham

			local button = Instance.new("TextButton", frame)
			button.Size = UDim2.new(0, 30, 0, 30)
			button.Position = UDim2.new(1, -35, 0.5, -15)
			button.BackgroundColor3 = default and Color3.fromRGB(78, 170, 227) or Color3.fromRGB(100, 100, 100)
			button.Text = ""
			Instance.new("UICorner", button).CornerRadius = UDim.new(1, 0)

			local toggled = default
			button.MouseButton1Click:Connect(function()
				toggled = not toggled
				local color = toggled and Color3.fromRGB(78, 170, 227) or Color3.fromRGB(100, 100, 100)
				TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = color}):Play()
				if callback then callback(toggled) end
			end)
		end

		function tab:CreateSlider(text, min, max, default, callback)
			local frame = Instance.new("Frame", Page)
			frame.Size = UDim2.new(0, 220, 0, 45)
			frame.BackgroundColor3 = Color3.fromRGB(47, 47, 47)
			Instance.new("UICorner", frame).CornerRadius = UDim.new(0, 6)

			local label = Instance.new("TextLabel", frame)
			label.Size = UDim2.new(1, 0, 0, 20)
			label.BackgroundTransparency = 1
			label.Text = string.format("%s: %s", text, default)
			label.TextColor3 = Color3.fromRGB(255, 255, 255)
			label.TextSize = 14
			label.Font = Enum.Font.Gotham

			local bar = Instance.new("Frame", frame)
			bar.Position = UDim2.new(0, 10, 0, 25)
			bar.Size = UDim2.new(1, -20, 0, 10)
			bar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
			bar.BorderSizePixel = 0
			Instance.new("UICorner", bar).CornerRadius = UDim.new(0, 4)

			local fill = Instance.new("Frame", bar)
			fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
			fill.BackgroundColor3 = Color3.fromRGB(78, 170, 227)
			fill.BorderSizePixel = 0
			Instance.new("UICorner", fill).CornerRadius = UDim.new(0, 4)

			local dragging = false
			local function update(input)
				local scale = math.clamp((input.Position.X - bar.AbsolutePosition.X) / bar.AbsoluteSize.X, 0, 1)
				fill.Size = UDim2.new(scale, 0, 1, 0)
				local value = round(min + (max - min) * scale, 0)
				label.Text = string.format("%s: %s", text, value)
				if callback then callback(value) end
			end

			bar.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = true
					update(input)
				end
			end)
			UserInputService.InputChanged:Connect(function(input)
				if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
					update(input)
				end
			end)
			UserInputService.InputEnded:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					dragging = false
				end
			end)
		end

		return tab
	end

	return self
end

return CatHubLib
