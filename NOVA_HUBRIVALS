--// Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local HttpService = game:GetService("HttpService")

--// Error Handling
local function logError(err)
    warn("Rivals ESP Script Error: " .. tostring(err))
end

--// Player References
local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui", 5)
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid", 5)
local camera = Workspace.CurrentCamera

if not PlayerGui or not Humanoid then
    logError("Failed to initialize PlayerGui or Humanoid")
    return
end

--// FPS Counter
local FPSLabel = Instance.new("TextLabel")
FPSLabel.Parent = PlayerGui
FPSLabel.Size = UDim2.new(0, 100, 0, 30)
FPSLabel.Position = UDim2.new(1, -110, 0, 10)
FPSLabel.BackgroundTransparency = 0.8
FPSLabel.BackgroundColor3 = Color3.fromRGB(40, 20, 60)
FPSLabel.TextColor3 = Color3.fromRGB(128, 0, 255)
FPSLabel.Font = Enum.Font.Gotham
FPSLabel.TextSize = 16
FPSLabel.Text = "FPS: 0"
FPSLabel.TextXAlignment = Enum.TextXAlignment.Right
FPSLabel.ZIndex = 10
local stroke = Instance.new("UIStroke", FPSLabel)
stroke.Color = Color3.fromRGB(128, 0, 255)
stroke.Thickness = 1
stroke.Transparency = 0.2

local frameCount = 0
local lastTime = tick()
local fpsConnection = RunService.RenderStepped:Connect(function()
    frameCount = frameCount + 1
    local currentTime = tick()
    if currentTime - lastTime >= 1 then
        FPSLabel.Text = "FPS: " .. tostring(math.floor(frameCount / (currentTime - lastTime)))
        frameCount = 0
        lastTime = currentTime
    end
end)

--// ESP GUI
local EspGui = Instance.new("ScreenGui")
EspGui.Name = "RivalsEspUI"
EspGui.Parent = PlayerGui
EspGui.Enabled = true
EspGui.ResetOnSpawn = false
EspGui.IgnoreGuiInset = true

--// ESP Frame (Draggable)
local EspFrame = Instance.new("Frame", EspGui)
EspFrame.Size = UDim2.new(0, 220, 0, 350)
EspFrame.Position = UDim2.new(0, 10, 0, 10)
EspFrame.BackgroundColor3 = Color3.fromRGB(40, 20, 60)
EspFrame.BackgroundTransparency = 0.2
Instance.new("UICorner", EspFrame).CornerRadius = UDim.new(0, 12)
local stroke = Instance.new("UIStroke", EspFrame)
stroke.Color = Color3.fromRGB(128, 0, 255)
stroke.Thickness = 3
stroke.Transparency = 0.1
stroke.LineJoinMode = Enum.LineJoinMode.Round

--// Scrolling Frame
local ScrollingFrame = Instance.new("ScrollingFrame", EspFrame)
ScrollingFrame.Size = UDim2.new(1, -20, 1, -20)
ScrollingFrame.Position = UDim2.new(0, 10, 0, 10)
ScrollingFrame.BackgroundTransparency = 1
ScrollingFrame.ScrollBarThickness = 5
ScrollingFrame.ScrollBarImageColor3 = Color3.fromRGB(128, 0, 255)
ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 700)
ScrollingFrame.ScrollingDirection = Enum.ScrollingDirection.Y

--// Draggable Logic
local dragging, dragInput, dragStart, startPos = false, nil, nil, nil
EspFrame.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging, dragStart, startPos = true, input.Position, EspFrame.Position
    end
end)
EspFrame.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)
EspFrame.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = false
    end
end)
RunService.RenderStepped:Connect(function()
    if dragging and dragInput then
        local delta = dragInput.Position - dragStart
        EspFrame.Position = UDim2.new(
            startPos.X.Scale, startPos.X.Offset + delta.X,
            startPos.Y.Scale, startPos.Y.Offset + delta.Y
        )
    end
end)

--// Click Sound
local ClickSound = Instance.new("Sound", EspGui)
ClickSound.SoundId = "rbxassetid://10512372288"
ClickSound.Volume = 0.5

--// Variables
local boxEspEnabled = false
local espHandles = {}
local skeletonEspEnabled = false
local Skeletons = {}
local aimbotEnabled = false
local rageBotEnabled = false
local softAimEnabled = false
local aimbotConnections = {}
local aimRadius = 150
local softAimRadius = 300
local noClipEnabled = false
local flyEnabled = false
local thirdPersonEnabled = false
local dashEnabled = false
local dashCooldown = 1
local dashSpeed = 50
local dashDuration = 0.2
local lastDashTime = 0
local flyConnection
local mouseLocked = true
local flySpeed = 50

--// FOV Circles
local fovCircle = Drawing.new("Circle")
fovCircle.Color = Color3.fromRGB(128, 0, 255)
fovCircle.Thickness = 2
fovCircle.Filled = false
fovCircle.Transparency = 0.7
fovCircle.Radius = aimRadius
fovCircle.Visible = false

local softAimCircle = Drawing.new("Circle")
softAimCircle.Color = Color3.fromRGB(128, 0, 255)
softAimCircle.Thickness = 1
softAimCircle.Filled = false
softAimCircle.Transparency = 0.8
softAimCircle.Radius = softAimRadius
softAimCircle.Visible = false

--// Toggle Function (Modified for Bright/Dark Purple Bubble)
local function makeToggle(parent, y, text, callback)
    local btnFrame = Instance.new("Frame", parent)
    btnFrame.Size = UDim2.new(0, 180, 0, 40)
    btnFrame.Position = UDim2.new(0, 0, 0, y)
    btnFrame.BackgroundTransparency = 1

    local btn = Instance.new("TextButton", btnFrame)
    btn.Size = UDim2.new(0, 140, 0, 40)
    btn.Position = UDim2.new(0, 0, 0, 0)
    btn.BackgroundColor3 = Color3.fromRGB(60, 30, 90)
    btn.BackgroundTransparency = 0.3
    btn.Font = Enum.Font.GothamBold
    btn.TextSize = 14
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.Text = text
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0, 20)
    local stroke = Instance.new("UIStroke", btn)
    stroke.Color = Color3.fromRGB(128, 0, 255)
    stroke.Thickness = 2
    stroke.Transparency = 0.1
    stroke.LineJoinMode = Enum.LineJoinMode.Round

    local toggleIndicator = Instance.new("Frame", btnFrame)
    toggleIndicator.Size = UDim2.new(0, 30, 0, 30)
    toggleIndicator.Position = UDim2.new(1, -30, 0, 5)
    toggleIndicator.BackgroundColor3 = Color3.fromRGB(60, 0, 80) -- Dark purple (off)
    Instance.new("UICorner", toggleIndicator).CornerRadius = UDim.new(0, 15)
    local toggleStroke = Instance.new("UIStroke", toggleIndicator)
    toggleStroke.Color = Color3.fromRGB(128, 0, 255)
    toggleStroke.Thickness = 2
    toggleStroke.Transparency = 0.1

    local isOn = false -- Track toggle state

    btn.MouseButton1Click:Connect(function()
        pcall(function()
            ClickSound:Play()
            isOn = not isOn
            toggleIndicator.BackgroundColor3 = isOn and Color3.fromRGB(200, 0, 255) or Color3.fromRGB(60, 0, 80) -- Bright purple (on) or dark purple (off)
            callback(isOn)
        end)
    end)
    btn.MouseEnter:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(80, 40, 120)
    end)
    btn.MouseLeave:Connect(function()
        btn.BackgroundColor3 = Color3.fromRGB(60, 30, 90)
    end)
    return btn, toggleIndicator
end

--// Slider Function (Unchanged)
local function makeSlider(parent, y, name, min, max, default, callback)
    local sliderFrame = Instance.new("Frame", parent)
    sliderFrame.Size = UDim2.new(0, 180, 0, 60)
    sliderFrame.Position = UDim2.new(0, 0, 0, y)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Visible = true

    local label = Instance.new("TextLabel", sliderFrame)
    label.Size = UDim2.new(1, 0, 0, 20)
    label.BackgroundTransparency = 1
    label.Text = name .. ": " .. tostring(default)
    label.TextColor3 = Color3.new(1, 1, 1)
    label.Font = Enum.Font.GothamBold
    label.TextSize = 14

    local sliderBar = Instance.new("Frame", sliderFrame)
    sliderBar.Size = UDim2.new(1, 0, 0, 12)
    sliderBar.Position = UDim2.new(0, 0, 0, 30)
    sliderBar.BackgroundColor3 = Color3.fromRGB(60, 30, 90)
    Instance.new("UICorner", sliderBar).CornerRadius = UDim.new(0, 6)
    local stroke = Instance.new("UIStroke", sliderBar)
    stroke.Color = Color3.fromRGB(128, 0, 255)
    stroke.Thickness = 2

    local sliderButton = Instance.new("TextButton", sliderBar)
    sliderButton.Size = UDim2.new(0, 20, 0, 20)
    sliderButton.BackgroundColor3 = Color3.fromRGB(128, 0, 255)
    sliderButton.Text = ""
    Instance.new("UICorner", sliderButton).CornerRadius = UDim.new(0, 10)

    local dragging = false
    sliderButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)
    sliderButton.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            pcall(function()
                local relativeX = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
                local value = math.floor(min + (max - min) * relativeX)
                sliderButton.Position = UDim2.new(relativeX, -10, 0, -4)
                label.Text = name .. ": " .. tostring(value)
                callback(value)
            end)
        end
    end)

    local initialRelative = (default - min) / (max - min)
    sliderButton.Position = UDim2.new(initialRelative, -10, 0, -4)

    return sliderFrame
end

--// Third-Person Logic
local function updateThirdPerson()
    pcall(function()
        if thirdPersonEnabled then
            Player.CameraMode = Enum.CameraMode.Classic
            if camera and camera.CameraType ~= Enum.CameraType.Custom then
                camera.CameraType = Enum.CameraType.Custom
            end
            local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                camera.CFrame = CFrame.new(hrp.Position - camera.CFrame.LookVector * 5, hrp.Position)
            end
        end
    end)
end

--// Dash Movement Logic
local function performDash()
    pcall(function()
        if dashEnabled and Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") and tick() - lastDashTime >= dashCooldown then
            local hrp = Player.Character.HumanoidRootPart
            local moveDirection = Vector3.new(0, 0, 0)
            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                moveDirection = moveDirection + camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                moveDirection = moveDirection - camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                moveDirection = moveDirection - camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                moveDirection = moveDirection + camera.CFrame.RightVector
            end
            if moveDirection.Magnitude > 0 then
                local dashVelocity = moveDirection.unit * dashSpeed
                hrp.Velocity = dashVelocity
                lastDashTime = tick()
                task.spawn(function()
                    task.wait(dashDuration)
                    if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
                        hrp.Velocity = Vector3.new(0, hrp.Velocity.Y, 0)
                    end
                end)
            end
        end
    end)
end

--// Box ESP
local function updateBoxESP()
    pcall(function()
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= Player and player.Character and player.Character:FindFirstChild("Head") then
                local head = player.Character.Head
                local h = player.Character:FindFirstChild("Humanoid")
                if h and h.Health > 0 then
                    local _, onScreen = camera:WorldToViewportPoint(head.Position)
                    if onScreen and boxEspEnabled then
                        local min, max = head.Position - Vector3.new(1, 1, 1), head.Position + Vector3.new(1, 1, 1)
                        local center = head.Position
                        local size = (max - min) * 1.2
                        if not espHandles[player] then
                            local box = Instance.new("Part", game.Workspace)
                            box.Name = "ESP_Box"
                            box.Size = size
                            box.Anchored = true
                            box.CanCollide = false
                            box.Position = center
                            box.Color = Color3.fromRGB(128, 0, 255)
                            box.Transparency = 0.5
                            espHandles[player] = box
                        else
                            local box = espHandles[player]
                            box.Size = size
                            box.Position = center
                        end
                    elseif espHandles[player] then
                        espHandles[player]:Destroy()
                        espHandles[player] = nil
                    end
                elseif espHandles[player] then
                    espHandles[player]:Destroy()
                    espHandles[player] = nil
                end
            elseif espHandles[player] then
                espHandles[player]:Destroy()
                espHandles[player] = nil
            end
        end
    end)
end

--// Skeleton ESP
local function createLine()
    local line = Drawing.new("Line")
    line.Thickness = 2
    line.Color = Color3.fromRGB(128, 0, 255)
    line.Visible = false
    return line
end

local R15Connections = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "LowerTorso"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"},
}

local R6Connections = {
    {"Head", "Torso"},
    {"Torso", "Left Arm"},
    {"Torso", "Right Arm"},
    {"Torso", "Left Leg"},
    {"Torso", "Right Leg"},
}

local function getRigType(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    return humanoid and humanoid.RigType or Enum.HumanoidRigType.R15
end

local function clearSkeleton(player)
    if Skeletons[player] then
        for _, line in pairs(Skeletons[player].Lines) do
            line.Visible = false
            line:Remove()
        end
        Skeletons[player] = nil
    end
end

local function setupSkeleton(player)
    if player == Player then return end
    if Skeletons[player] then clearSkeleton(player) end
    Skeletons[player] = {Lines = {}, RigType = Enum.HumanoidRigType.R15, Character = nil}
    local function onCharacterAdded(character)
        clearSkeleton(player)
        Skeletons[player] = {Lines = {}, RigType = getRigType(character), Character = character}
        local connections = (Skeletons[player].RigType == Enum.HumanoidRigType.R6) and R6Connections or R15Connections
        for _ = 1, #connections do table.insert(Skeletons[player].Lines, createLine()) end
    end
    player.CharacterAdded:Connect(onCharacterAdded)
    if player.Character then onCharacterAdded(player.Character) end
end

--// Aimbot Logic
local aiming = false
local lockedTarget = nil

local function getClosestTarget(radius)
    local bestDist, bestPl = math.huge, nil
    local mx, my = UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= Player and pl.Character and pl.Character:FindFirstChild("Head") then
            local h = pl.Character:FindFirstChild("Humanoid")
            if h and h.Health > 0 then
                local head = pl.Character.Head
                local screenPos, onScreen = camera:WorldToScreenPoint(head.Position)
                if onScreen then
                    local dist = (Vector2.new(screenPos.X, screenPos.Y) - Vector2.new(mx, my)).Magnitude
                    if dist < bestDist and dist <= radius then
                        bestDist, bestPl = dist, pl
                    end
                end
            end
        end
    end
    return bestPl
end

--// NoClip Logic
local function updateNoClip()
    pcall(function()
        if noClipEnabled and Player.Character then
            for _, part in pairs(Player.Character:GetDescendants()) do
                if part:IsA("BasePart") then part.CanCollide = false end
            end
            task.wait(0.05)
        elseif Player.Character then
            for _, part in pairs(Player.Character:GetDescendants()) do
                if part:IsA("BasePart") then part.CanCollide = true end
            end
        end
    end)
end

--// Fly Logic
local function updateFly()
    pcall(function()
        if flyEnabled and Player.Character then
            local hrp = Player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                if not flyConnection then
                    flyConnection = RunService.RenderStepped:Connect(function()
                        pcall(function()
                            if not flyEnabled or not Player.Character or not Player.Character:FindFirstChild("HumanoidRootPart") then return end
                            local moveDirection = Vector3.new(0, 0, 0)
                            if UserInputService:IsKeyDown(Enum.KeyCode.W) then moveDirection = moveDirection + camera.CFrame.LookVector end
                            if UserInputService:IsKeyDown(Enum.KeyCode.S) then moveDirection = moveDirection - camera.CFrame.LookVector end
                            if UserInputService:IsKeyDown(Enum.KeyCode.A) then moveDirection = moveDirection - camera.CFrame.RightVector end
                            if UserInputService:IsKeyDown(Enum.KeyCode.D) then moveDirection = moveDirection + camera.CFrame.RightVector end
                            if UserInputService:IsKeyDown(Enum.KeyCode.Space) then moveDirection = moveDirection + Vector3.new(0, 1, 0) end
                            if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then moveDirection = moveDirection - Vector3.new(0, 1, 0) end
                            if moveDirection.Magnitude > 0 then hrp.Velocity = moveDirection.unit * flySpeed else hrp.Velocity = Vector3.new(0, 0, 0) end
                            hrp.CFrame = CFrame.new(hrp.Position, hrp.Position + camera.CFrame.LookVector)
                            task.wait(0.05)
                        end)
                    end)
                end
                Humanoid:ChangeState(Enum.HumanoidStateType.Physics)
            end
        else
            if flyConnection then flyConnection:Disconnect() flyConnection = nil end
            if Player.Character and Player.Character:FindFirstChild("Humanoid") then Humanoid:ChangeState(Enum.HumanoidStateType.Running) end
        end
    end)
end

--// Rage Bot Auto-Shoot
local function autoShoot()
    pcall(function()
        if rageBotEnabled and Player.Character then
            local target = getClosestTarget(aimRadius)
            if target and target.Character and target.Character:FindFirstChild("Head") then
                local tool = Player.Character:FindFirstChildOfClass("Tool")
                if tool then
                    local mouse = Player:GetMouse()
                    mouse.Target = target.Character.Head
                    mouse.Hit = CFrame.new(target.Character.Head.Position)
                    tool:Activate()
                    task.wait(0.1)
                end
            end
        end
    end)
end

--// Setup Skeletons
for _, player in ipairs(Players:GetPlayers()) do
    if player ~= Player then pcall(function() setupSkeleton(player) end) end
end

--// Toggles and Sliders
local BoxESPToggle, BoxESPIndicator = makeToggle(ScrollingFrame, 10, "Box ESP", function(isOn)
    boxEspEnabled = isOn
    updateBoxESP()
end)

local SkeletonESPToggle, SkeletonESPIndicator = makeToggle(ScrollingFrame, 60, "Skeleton ESP", function(isOn)
    skeletonEspEnabled = isOn
    if not skeletonEspEnabled then
        for _, playerSkeleton in pairs(Skeletons) do
            if playerSkeleton then
                for _, line in pairs(playerSkeleton.Lines) do
                    line.Visible = false
                end
            end
        end
    end
end)

local AimbotToggle, AimbotIndicator = makeToggle(ScrollingFrame, 110, "Aimbot", function(isOn)
    aimbotEnabled = isOn
    fovCircle.Visible = aimbotEnabled
    if aimbotEnabled then
        rageBotEnabled = false
        softAimEnabled = false
        RageBotIndicator.BackgroundColor3 = Color3.fromRGB(60, 0, 80)
        SoftAimIndicator.BackgroundColor3 = Color3.fromRGB(60, 0, 80)
        softAimCircle.Visible = false
    end
end)

local RageBotToggle, RageBotIndicator = makeToggle(ScrollingFrame, 160, "Rage Bot", function(isOn)
    rageBotEnabled = isOn
    fovCircle.Visible = rageBotEnabled
    if rageBotEnabled then
        aimbotEnabled = false
        softAimEnabled = false
        AimbotIndicator.BackgroundColor3 = Color3.fromRGB(60, 0, 80)
        SoftAimIndicator.BackgroundColor3 = Color3.fromRGB(60, 0, 80)
        softAimCircle.Visible = false
        flyEnabled = true
        FlyIndicator.BackgroundColor3 = Color3.fromRGB(200, 0, 255)
        updateFly()
    end
end)

local SoftAimToggle, SoftAimIndicator = makeToggle(ScrollingFrame, 210, "Soft Aim", function(isOn)
    softAimEnabled = isOn
    softAimCircle.Visible = softAimEnabled
    if softAimEnabled then
        aimbotEnabled = false
        rageBotEnabled = false
        AimbotIndicator.BackgroundColor3 = Color3.fromRGB(60, 0, 80)
        RageBotIndicator.BackgroundColor3 = Color3.fromRGB(60, 0, 80)
        fovCircle.Visible = false
    end
end)

local NoClipToggle, NoClipIndicator = makeToggle(ScrollingFrame, 260, "NoClip", function(isOn)
    noClipEnabled = isOn
    updateNoClip()
end)

local FlyToggle, FlyIndicator = makeToggle(ScrollingFrame, 310, "Fly", function(isOn)
    flyEnabled = isOn
    updateFly()
end)

local ThirdPersonToggle, ThirdPersonIndicator = makeToggle(ScrollingFrame, 360, "Third Person", function(isOn)
    thirdPersonEnabled = isOn
    updateThirdPerson()
end)

local DashToggle, DashIndicator
local DashSlider
local FOVSlider

local function updateCanvasSize()
    if dashEnabled then
        ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 810)
    else
        ScrollingFrame.CanvasSize = UDim2.new(0, 0, 0, 750)
    end
end

DashToggle, DashIndicator = makeToggle(ScrollingFrame, 410, "Dash", function(isOn)
    dashEnabled = isOn
    DashSlider.Visible = dashEnabled
    updateCanvasSize()
end)

DashSlider = makeSlider(ScrollingFrame, 460, "Dash Speed", 20, 100, dashSpeed, function(value)
    dashSpeed = value
end)
DashSlider.Visible = false

FOVSlider = makeSlider(ScrollingFrame, dashEnabled and 530 or 470, "Aimbot FOV", 50, 500, aimRadius, function(value)
    aimRadius = value
    fovCircle.Radius = value
end)

local FlySpeedSlider = makeSlider(ScrollingFrame, dashEnabled and 590 or 530, "Fly Speed", 50, 200, flySpeed, function(value)
    flySpeed = value
end)

--// Destroy Menu Button
local DestroyButton, DestroyIndicator = makeToggle(ScrollingFrame, dashEnabled and 650 or 590, "Destroy Menu", function()
    EspGui:Destroy()
end)
DestroyButton.TextColor3 = Color3.new(1, 0, 0) -- Red text to indicate destructive action

--// Aimbot Connections
table.insert(aimbotConnections, UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aiming = true
        lockedTarget = getClosestTarget(softAimEnabled and softAimRadius or aimRadius)
    end
end))

table.insert(aimbotConnections, UserInputService.InputEnded:Connect(function(input, processed)
    if processed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        aiming = false
        lockedTarget = nil
    end
end))

--// Dash Input
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.LeftShift then
        performDash()
    end
end)

--// Mouse Lock Toggle with Tab
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.Tab then
        pcall(function()
            ClickSound:Play()
            mouseLocked = not mouseLocked
            UserInputService.MouseBehavior = mouseLocked and Enum.MouseBehavior.LockCenter or Enum.MouseBehavior.Default
        end)
    end
end)

--// Update Loop
local renderSteppedConnection = RunService.RenderStepped:Connect(function()
    pcall(function()
        if not camera then return end
        local mx, my = UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y
        fovCircle.Position = Vector2.new(mx, my)
        softAimCircle.Position = Vector2.new(mx, my)
        fovCircle.Visible = aimbotEnabled or rageBotEnabled
        softAimCircle.Visible = softAimEnabled

        if aiming and (aimbotEnabled or rageBotEnabled or softAimEnabled) then
            local target = lockedTarget or getClosestTarget(softAimEnabled and softAimRadius or aimRadius)
            if target and target.Character then
                local head = target.Character:FindFirstChild("Head")
                if head then
                    if rageBotEnabled then
                        camera.CFrame = CFrame.new(camera.CFrame.Position, head.Position)
                    elseif aimbotEnabled then
                        local currentLook = camera.CFrame.LookVector
                        local targetDir = (head.Position - camera.CFrame.Position).Unit
                        local newDir = currentLook:Lerp(targetDir, 0.5)
                        camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + newDir)
                    elseif softAimEnabled then
                        local currentLook = camera.CFrame.LookVector
                        local targetDir = (head.Position - camera.CFrame.Position).Unit
                        local newDir = currentLook:Lerp(targetDir, 0.2)
                        camera.CFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + newDir)
                    end
                end
            end
        end

        if skeletonEspEnabled then
            for player, data in pairs(Skeletons) do
                if data.Character and data.Character:FindFirstChild("Head") then
                    local h = data.Character:FindFirstChild("Humanoid")
                    if h and h.Health > 0 then
                        local head = data.Character.Head
                        local _, headOnScreen = camera:WorldToViewportPoint(head.Position)
                        if headOnScreen then
                            local connections = (data.RigType == Enum.HumanoidRigType.R6) and R6Connections or R15Connections
                            for i, parts in ipairs(connections) do
                                local part0 = data.Character:FindFirstChild(parts[1])
                                local part1 = data.Character:FindFirstChild(parts[2])
                                local line = data.Lines[i]
                                if part0 and part1 then
                                    local pos0, onScreen0 = camera:WorldToViewportPoint(part0.Position)
                                    local pos1, onScreen1 = camera:WorldToViewportPoint(part1.Position)
                                    if onScreen0 and onScreen1 then
                                        line.From = Vector2.new(pos0.X, pos0.Y)
                                        line.To = Vector2.new(pos1.X, pos1.Y)
                                        line.Visible = true
                                    else
                                        line.Visible = false
                                    end
                                else
                                    line.Visible = false
                                end
                            end
                        else
                            for _, line in pairs(data.Lines) do
                                line.Visible = false
                            end
                        end
                    else
                        for _, line in pairs(data.Lines) do
                            line.Visible = false
                        end
                    end
                else
                    for _, line in pairs(data.Lines) do
                        line.Visible = false
                    end
                end
            end
        else
            for _, playerSkeleton in pairs(Skeletons) do
                if playerSkeleton then
                    for _, line in pairs(playerSkeleton.Lines) do
                        line.Visible = false
                    end
                end
            end
        end

        updateNoClip()
        updateFly()
        autoShoot()
        updateBoxESP()
        updateThirdPerson()
    end)
end)

--// Player Connections
local playerAddedConnection = Players.PlayerAdded:Connect(function(player)
    if player ~= Player then pcall(function() setupSkeleton(player) end) end
end)

local playerRemovingConnection = Players.PlayerRemoving:Connect(function(player)
    pcall(function()
        clearSkeleton(player)
        if espHandles[player] then
            local box = espHandles[player]
            if box and box.Parent then box:Destroy() end
            espHandles[player] = nil
        end
    end)
end)

--// Character Added
Player.CharacterAdded:Connect(function(character)
    pcall(function()
        Character = character
        Humanoid = character:WaitForChild("Humanoid", 5)
        updateNoClip()
        updateFly()
        updateThirdPerson()
    end)
end)

--// Toggle GUI with G
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.G then
        pcall(function()
            ClickSound:Play()
            EspGui.Enabled = not EspGui.Enabled
        end)
    end
end)

--// Cleanup
EspGui.Destroying:Connect(function()
    pcall(function()
        if playerAddedConnection then playerAddedConnection:Disconnect() end
        if playerRemovingConnection then playerRemovingConnection:Disconnect() end
        if renderSteppedConnection then renderSteppedConnection:Disconnect() end
        if flyConnection then flyConnection:Disconnect() end
        if fpsConnection then fpsConnection:Disconnect() end
        for _, connection in ipairs(aimbotConnections) do connection:Disconnect() end
        for _, box in pairs(espHandles) do if box and box.Parent then box:Destroy() end end
        for _, playerSkeleton in pairs(Skeletons) do
            if playerSkeleton then
                for _, line in pairs(playerSkeleton.Lines) do
                    line.Visible = false
                    line:Remove()
                end
            end
        end
        if fovCircle then fovCircle:Remove() end
        if softAimCircle then softAimCircle:Remove() end
        if FPSLabel then FPSLabel:Destroy() end
    end)
end)

--// Initial Setup
print("Rivals ESP Script Loaded Successfully")
updateCanvasSize()
